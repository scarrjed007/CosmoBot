from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import requests

# üîë –í–°–¢–ê–í –°–í–Ü–ô –¢–û–ö–ï–ù –¢–£–¢
TOKEN = "YOUR TOKEN"
NASA_API_KEY = "YOUR TOKEN"
# üîë N2YO.COM API –ö–õ–Æ–ß –¢–£–¢
N2YO_API_KEY = "YOUR TOKEN" 


# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø CosmoBot ‚Äî —Ç–≤—ñ–π –∫–æ—Å–º—ñ—á–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫!\n\n"
        "üì° –ö–æ–º–∞–Ω–¥–∏:\n"
        "/news ‚Äì –∫–æ—Å–º—ñ—á–Ω—ñ –Ω–æ–≤–∏–Ω–∏\n"
        "/apod ‚Äì —Ñ–æ—Ç–æ –¥–Ω—è –≤—ñ–¥ NASA\n"
        "/mars ‚Äì —Ñ–æ—Ç–æ –∑ –ú–∞—Ä—Å–∞\n"
        "/asteroids ‚Äì –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ –æ–±'—î–∫—Ç–∏\n"
        "/epic ‚Äì –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ó–µ–º–ª—ñ\n"
        "/exoplanet ‚Äì –¥–∞–Ω—ñ –ø—Ä–æ –µ–∫–∑–æ–ø–ª–∞–Ω–µ—Ç–∏\n"
        "/imagelibrary ‚Äì –ø–æ—à—É–∫ —Ñ–æ—Ç–æ NASA\n"
        "/ssc ‚Äì Satellite Situation Center\n"
        "/iss - –ü—Ä–æ–ª—ñ—Ç –ú–ö–° –Ω–∞–¥ –ö–∏—î–≤–æ–º\n"
        "/trek ‚Äì –∫–∞—Ä—Ç–∏ Moon/Mars/Vesta\n"
        "/quiz ‚Äì –∫–æ—Å–º—ñ—á–Ω–∞ –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∞\n"
        "/help ‚Äì —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è"
    )

# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõ† –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å:\n"
        "/news ‚Äî –∫–æ—Å–º—ñ—á–Ω—ñ –Ω–æ–≤–∏–Ω–∏\n"
        "/apod ‚Äî Astronomy Picture of the Day\n"
        "/mars ‚Äî —Ñ–æ—Ç–æ –∑ —Ä–æ–≤–µ—Ä–∞ Curiosity\n"
        "/asteroids ‚Äî –Ω–∞–±–ª–∏–∂–µ–Ω—ñ –æ–± º—î–∫—Ç–∏ –¥–æ –ó–µ–º–ª—ñ\n"
        "/epic ‚Äî –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ó–µ–º–ª—ñ (EPIC)\n"
        "/exoplanet ‚Äî –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –µ–∫–∑–æ–ø–ª–∞–Ω–µ—Ç–∏\n"
        "/imagelibrary ‚Äî –ø–æ—à—É–∫ NASA —Ñ–æ—Ç–æ\n"
        "/ssc ‚Äî Satellite Situation Center\n"
        "/iss - –ü—Ä–æ–ª—ñ—Ç –ú–ö–° –Ω–∞–¥ –ö–∏—î–≤–æ–º\n"
        "/trek ‚Äî Moon, Mars, Vesta –∫–∞—Ä—Ç–∏"
        "/quiz ‚Äì –∫–æ—Å–º—ñ—á–Ω–∞ –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∞\n"
    )

# /news
async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = "https://api.spaceflightnewsapi.net/v4/articles?limit=2"
    response = requests.get(url)
    if response.status_code == 200:
        for article in response.json()["results"]:
            title = article["title"]
            summary = article["summary"][:300] + "..."
            link = article["url"]
            await update.message.reply_text(
                f"üöÄ <b>{title}</b>\n\n{summary}\nüîó <a href='{link}'>–ß–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ</a>",
                parse_mode="HTML"
            )
    else:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏.")

# /apod
async def apod(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = f"https://api.nasa.gov/planetary/apod?api_key={NASA_API_KEY}"
    r = requests.get(url)
    if r.status_code == 200:
        d = r.json()
        await update.message.reply_photo(
            photo=d["url"],
            caption=f"ü™ê <b>{d['title']}</b>\n\n{d['explanation'][:300]}...",
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text("‚ùå APOD –Ω–µ –ø—Ä–∞—Ü—é—î.")

# /mars
async def mars(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = f"https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/latest_photos?api_key={NASA_API_KEY}"
    r = requests.get(url)
    if r.status_code == 200:
        photos = r.json().get("latest_photos", [])
        if photos:
            p = photos[0]
            await update.message.reply_photo(photo=p["img_src"], caption=f"üì∏ Curiosity, {p['earth_date']}")
        else:
            await update.message.reply_text("üòî –§–æ—Ç–æ –∑ –ú–∞—Ä—Å–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    else:
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ Mars API.")

# /asteroids
async def asteroids(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = f"https://api.nasa.gov/neo/rest/v1/feed?api_key={NASA_API_KEY}"
    r = requests.get(url)
    if r.status_code == 200:
        data = r.json()
        msg = "‚òÑÔ∏è –ù–∞–π–±–ª–∏–∂—á—ñ –∞—Å—Ç–µ—Ä–æ—ó–¥–∏:\n"
        count = 0
        for date, objs in data["near_earth_objects"].items():
            for obj in objs[:2]:
                name = obj["name"]
                size = obj["estimated_diameter"]["meters"]["estimated_diameter_max"]
                dist = obj["close_approach_data"][0]["miss_distance"]["kilometers"]
                msg += f"\nüî∏ {name}\n   ~{round(size)} –º\n   –í—ñ–¥—Å—Ç–∞–Ω—å: {round(float(dist))} –∫–º\n"
                count += 1
                if count >= 4:
                    break
            if count >= 4:
                break
        await update.message.reply_text(msg)
    else:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞—Å—Ç–µ—Ä–æ—ó–¥–∏.")

# /epic
async def epic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = f"https://api.nasa.gov/EPIC/api/natural/images?api_key={NASA_API_KEY}"
    r = requests.get(url)
    if r.status_code == 200:
        data = r.json()
        if data:
            img = data[0]
            date = img["date"].split()[0].replace("-", "/")
            url_img = f"https://epic.gsfc.nasa.gov/archive/natural/{date}/jpg/{img['image']}.jpg"
            await update.message.reply_photo(photo=url_img, caption=f"üåç EPIC, {img['date']}")
        else:
            await update.message.reply_text("üòî –ó–æ–±—Ä–∞–∂–µ–Ω—å –Ω–µ–º–∞—î.")
    else:
        await update.message.reply_text("‚ùå EPIC –Ω–µ –ø—Ä–∞—Ü—é—î.")

# /exoplanet
async def exoplanet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üî≠ –î–∞–Ω—ñ –ø—Ä–æ –µ–∫–∑–æ–ø–ª–∞–Ω–µ—Ç–∏:\nhttps://exoplanetarchive.ipac.caltech.edu/"
    )

# /imagelibrary
async def image_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = "mars"
    url = f"https://images-api.nasa.gov/search?q={q}"
    r = requests.get(url)
    if r.status_code == 200:
        items = r.json()["collection"]["items"]
        if items:
            item = items[0]
            img_url = item["links"][0]["href"]
            title = item["data"][0]["title"]
            await update.message.reply_photo(photo=img_url, caption=f"üñºÔ∏è {title}")
        else:
            await update.message.reply_text("üì∏ –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    else:
        await update.message.reply_text("‚ùå Image API –Ω–µ –ø—Ä–∞—Ü—é—î.")

# /ssc
async def ssc(update: Update, context: ContextTypes.DEFAULT_TYPE):
 await update.message.reply_text( "üõ∞Ô∏è Satellite Situation Center:\nhttps://sscweb.gsfc.nasa.gov/"
)
# /iss - –ü—Ä–æ–ª—ñ—Ç –ú–ö–° –Ω–∞–¥ –ö–∏—î–≤–æ–º
from datetime import datetime

async def iss(update: Update, context: ContextTypes.DEFAULT_TYPE):
    NORAD_ID = 25544           # ISS
    latitude = 50.45
    longitude = 30.52
    altitude = 150             # –º
    days_forward = 2 #–¥–Ω—ñ–≤ –≤–ø–µ—Ä–µ–¥

    # ‚ñ∫ –í–∏–±–µ—Ä—ñ—Ç—å –û–î–ò–ù –∑ –¥–≤–æ—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ -------------------------------
    use_visual = False         # True = –≤–∏–¥–∏–º—ñ –ø—Ä–æ–ª—å–æ—Ç–∏, False = —Ä–∞–¥—ñ–æ–ø—Ä–æ–ª—å–æ—Ç–∏
    # ----------------------------------------------------------------

    if use_visual:
        min_visibility = 1     # —Å–µ–∫
        endpoint = (
            f"visualpasses/{NORAD_ID}/{latitude}/{longitude}/{altitude}/"
            f"{days_forward}/{min_visibility}"
        )
    else:
        min_elevation = 10     # ¬∞
        endpoint = (
            f"radiopasses/{NORAD_ID}/{latitude}/{longitude}/{altitude}/"
            f"{days_forward}/{min_elevation}"
        )

    url = f"https://api.n2yo.com/rest/v1/satellite/{endpoint}/?apiKey={N2YO_API_KEY}"
    print("–ó–∞–ø–∏—Ç:", url)

    try:
        r = requests.get(url, timeout=10)
        r.raise_for_status()
        data = r.json()

        if data.get("info", {}).get("passescount", 0) == 0:
            await update.message.reply_text(
                "üòî –£ –∑–∞–∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –ø—Ä–æ–ª—å–æ—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
            )
            return

        msg = "üì° –ù–∞–π–±–ª–∏–∂—á—ñ –ø—Ä–æ–ª—å–æ—Ç–∏ –ú–ö–° –Ω–∞–¥ –ö–∏—î–≤–æ–º:\n\n"
        for p in data["passes"]:
            start = datetime.utcfromtimestamp(p["startUTC"])
            # —É visualpasses —î –≥–æ—Ç–æ–≤–∏–π duration,
            # —É radiopasses —Ä–∞—Ö—É—î–º–æ –ø–æ UTC-–º—ñ—Ç–∫–∞—Ö
            duration = p.get("duration") or (p["endUTC"] - p["startUTC"])

            msg += (
                f"üîπ –ü–æ—á–∞—Ç–æ–∫: {start.strftime('%d.%m.%Y –æ %H:%M:%S UTC')}\n"
                f"  –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration} —Å–µ–∫\n"
                f"  –ú–∞–∫—Å. –≤–∏—Å–æ—Ç–∞: {p['maxEl']}¬∞\n"
                f"  –ù–∞–ø—Ä—è–º–æ–∫: –≤—ñ–¥ {p['startAzCompass']} –¥–æ {p['endAzCompass']}\n\n"
            )

        await update.message.reply_text(msg)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        print("ISS-handler error:", e)

# /trek
async def trek(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåñ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –∫–∞—Ä—Ç–∏:\n"
        "‚Ä¢ Moon Trek ‚Äì https://trek.nasa.gov/moon\n"
        "‚Ä¢ Mars Trek ‚Äì https://trek.nasa.gov/mars\n"
        "‚Ä¢ Vesta Trek ‚Äì https://trek.nasa.gov/vesta"
    )

# –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—ó –∫–æ—Å–º—ñ—á–Ω–æ—ó –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏ –∑ 15 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è–º–∏ (—á–∞—Å—Ç–∏–Ω–∞ 1 ‚Äî –ø–∏—Ç–∞–Ω–Ω—è + –ª–æ–≥—ñ–∫–∞)
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler

# ‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Ç–∞–Ω—å –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏
quiz_questions = [
    {
        "question": "–ö–æ–ª–∏ –ø–µ—Ä—à—ñ –ª—é–¥–∏ –≤–∏—Å–∞–¥–∏–ª–∏—Å—è –Ω–∞ –ú—ñ—Å—è—Ü—ñ?",
        "options": ["1965", "1969", "1972"],
        "answer": "1969"
    },
    {
        "question": "–°–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ –∑–∞–π–º–∞—î –æ–¥–∏–Ω –æ–±–µ—Ä—Ç –ú—ñ—Å—è—Ü—è –Ω–∞–≤–∫–æ–ª–æ –ó–µ–º–ª—ñ?",
        "options": ["14", "27", "30"],
        "answer": "27"
    },
    {
        "question": "–ö–æ–ª–∏ –±—É–≤ –∑–∞–ø—É—â–µ–Ω–∏–π –ø–µ—Ä—à–∏–π —à—Ç—É—á–Ω–∏–π —Å—É–ø—É—Ç–Ω–∏–∫ –ó–µ–º–ª—ñ?",
        "options": ["1957", "1961", "1969"],
        "answer": "1957"
    },
    {
        "question": "–•—Ç–æ –±—É–≤ –ø–µ—Ä—à–æ—é –ª—é–¥–∏–Ω–æ—é –≤ –∫–æ—Å–º–æ—Å—ñ?",
        "options": ["–ù—ñ–ª –ê—Ä–º—Å—Ç—Ä–æ–Ω–≥", "–Æ—Ä—ñ–π –ì–∞–≥–∞—Ä—ñ–Ω", "–î–∂–æ–Ω –ì–ª–µ–Ω–Ω"],
        "answer": "–Æ—Ä—ñ–π –ì–∞–≥–∞—Ä—ñ–Ω"
    },
    {
        "question": "–Ø–∫–∞ –ø–ª–∞–Ω–µ—Ç–∞ –Ω–∞–π–±—ñ–ª—å—à–∞ —É –°–æ–Ω—è—á–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ?",
        "options": ["–ó–µ–º–ª—è", "–Æ–ø—ñ—Ç–µ—Ä", "–°–∞—Ç—É—Ä–Ω"],
        "answer": "–Æ–ø—ñ—Ç–µ—Ä"
    },
    {
        "question": "–°–∫—ñ–ª—å–∫–∏ –ø–ª–∞–Ω–µ—Ç —É –°–æ–Ω—è—á–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ?",
        "options": ["8", "9", "10"],
        "answer": "8"
    },
    {
        "question": "–Ø–∫–∞ –Ω–∞–π–±–ª–∏–∂—á–∞ –∑—ñ—Ä–∫–∞ –¥–æ –ó–µ–º–ª—ñ?",
        "options": ["–ê–ª—å—Ñ–∞ –¶–µ–Ω—Ç–∞–≤—Ä–∞", "–°–æ–Ω—Ü–µ", "–°—ñ—Ä—ñ—É—Å"],
        "answer": "–°–æ–Ω—Ü–µ"
    },
    {
        "question": "–Ø–∫–∏–π –º–∞—Ä—Å–æ—Ö—ñ–¥ –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å NASA?",
        "options": ["Curiosity", "Perseverance", "Fobos-Grunt"],
        "answer": "Fobos-Grunt"
    },
    {
        "question": "–Ø–∫ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è –ø–µ—Ä—à–∏–π —É—Å–ø—ñ—à–Ω–∏–π –º–∞—Ä—Å—ñ–∞–Ω—Å—å–∫–∏–π –∑–æ–Ω–¥ NASA?",
        "options": ["Viking 1", "Pathfinder", "Spirit"],
        "answer": "Viking 1"
    },
    {
        "question": "–°–∫—ñ–ª—å–∫–∏ –ª—é–¥–µ–π –ø–æ–±—É–≤–∞–ª–æ –Ω–∞ –ú—ñ—Å—è—Ü—ñ (—Å—Ç–∞–Ω–æ–º –Ω–∞ 2025)?",
        "options": ["6", "12", "24"],
        "answer": "12"
    },
    {
        "question": "–Ø–∫ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è —Ç–µ–ª–µ—Å–∫–æ–ø, —â–æ –∑–∞–º—ñ–Ω–∏–≤ ¬´–ì–∞–±–±–ª¬ª?",
        "options": ["–ö–µ–ø–ª–µ—Ä", "–î–∂–µ–π–º—Å –í–µ–±–±", "–ß–∞–Ω–¥—Ä–∞"],
        "answer": "–î–∂–µ–π–º—Å –í–µ–±–±"
    },
    {
        "question": "–°–∫—ñ–ª—å–∫–∏ —Å—É–ø—É—Ç–Ω–∏–∫—ñ–≤ Starlink –Ω–∞ –æ—Ä–±—ñ—Ç—ñ (–æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω–æ 2025)?",
        "options": ["2500", "5000", "8000"],
        "answer": "8000"
    },
    {
        "question": "–Ø–∫–µ —Ç—ñ–ª–æ –≤ –°–æ–Ω—è—á–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ –º–∞—î –Ω–∞–π–±—ñ–ª—å—à–µ –≤—É–ª–∫–∞–Ω—ñ–≤?",
        "options": ["–í–µ–Ω–µ—Ä–∞", "–Ü–æ", "–ú–µ—Ä–∫—É—Ä—ñ–π"],
        "answer": "–Ü–æ"
    },
    {
        "question": "–©–æ —Ç–∞–∫–µ —á–æ—Ä–Ω–∞ –¥—ñ—Ä–∞?",
        "options": ["–ü–ª–∞–Ω–µ—Ç–∞", "–ó—ñ—Ä–∫–∞", "–û–±'—î–∫—Ç –≥—Ä–∞–≤—ñ—Ç–∞—Ü—ñ—ó"],
        "answer": "–û–±'—î–∫—Ç –≥—Ä–∞–≤—ñ—Ç–∞—Ü—ñ—ó"
    },
    {
        "question": "–Ø–∫ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è –≥–∞–ª–∞–∫—Ç–∏–∫–∞, –≤ —è–∫—ñ–π –º–∏ –∂–∏–≤–µ–º–æ?",
        "options": ["–ê–Ω–¥—Ä–æ–º–µ–¥–∞", "–ú–æ–ª–æ—á–Ω–∏–π –®–ª—è—Ö", "–ú–∞–≥–µ–ª–ª–∞–Ω–æ–≤–∞ –•–º–∞—Ä–∞"],
        "answer": "–ú–æ–ª–æ—á–Ω–∏–π –®–ª—è—Ö"
    },
]

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏ (user_id -> index –ø–∏—Ç–∞–Ω–Ω—è + —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
user_quiz_state = {}

# /quiz ‚Äî –ø–æ—á–∞—Ç–æ–∫ –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏
async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_quiz_state[user_id] = {"index": 0, "score": 0}
    await send_question(update, context, user_id)

# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    state = user_quiz_state[user_id]
    index = state["index"]
    if index >= len(quiz_questions):
        score = state["score"]
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üèÅ –í—ñ–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–¢–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(quiz_questions)}"
        )
        del user_quiz_state[user_id]
        return

    q = quiz_questions[index]
    buttons = [
        [InlineKeyboardButton(opt, callback_data=opt)] for opt in q["options"]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)
    await context.bot.send_message(
        chat_id=user_id,
        text=f"‚ùì {q['question']}",
        reply_markup=reply_markup
    )

# –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    answer = query.data
    await query.answer()

    state = user_quiz_state.get(user_id)
    if state is None:
        await query.edit_message_text("‚ùó –¶—è –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∞ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    index = state["index"]
    correct = quiz_questions[index]["answer"]

    if answer == correct:
        state["score"] += 1
        response = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
    else:
        response = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct}"

    await query.edit_message_text(response)
    state["index"] += 1
    await send_question(update, context, user_id)



# –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Ç–µ–∫—Å—Ç
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if "–ø—Ä–∏–≤—ñ—Ç" in text:
        await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! üöÄ")
    elif "—è–∫ —Å–ø—Ä–∞–≤–∏" in text:
        await update.message.reply_text("–£ –∫–æ—Å–º–æ—Å—ñ ‚Äî —Å—É–ø–µ—Ä! –ê –≤ —Ç–µ–±–µ?")
    else:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ /help, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –º–æ—ó –∫–æ–º–∞–Ω–¥–∏.")

# –°—Ç–∞—Ä—Ç
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("news", news))
app.add_handler(CommandHandler("apod", apod))
app.add_handler(CommandHandler("mars", mars))
app.add_handler(CommandHandler("asteroids", asteroids))
app.add_handler(CommandHandler("epic", epic))
app.add_handler(CommandHandler("exoplanet", exoplanet))
app.add_handler(CommandHandler("imagelibrary", image_search))
app.add_handler(CommandHandler("ssc", ssc))
app.add_handler(CommandHandler("iss", iss)) 
app.add_handler(CommandHandler("trek", trek))
app.add_handler(CommandHandler("quiz", quiz))
app.add_handler(CallbackQueryHandler(handle_answer))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

print("üöÄ CosmoBot –∑–∞–ø—É—â–µ–Ω–æ!")
app.run_polling()
